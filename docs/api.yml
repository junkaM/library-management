openapi: 3.0.3
info:
  title: Library API
  version: 1.1.0
  description: STD22065
servers:
  - url: https://library.com
paths:
  /books:
    get:
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        - in: query
          name: releaseDate
          description: Filter by the date of the release date range
          required: false
          schema:
            type: string
            format: date
      responses:
        200:
          description: The list of filtered books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    put:
      summary: Create or update a list of books
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Book'
      responses:
        200:
          description: The list of created or updated books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'

  /books/{bookId}/authors/{authorId}:
    put:
      tags:
        - books
      summary: Attach author to a book
      description: Attach author to a book by id.
      operationId: attachAuthorToBook
      parameters:
        - in: path
          name: bookId
          description: The id of the book
          required: true
          schema:
            type: string
        - in: path
          name: authorId
          description: The id of the author
          required: true
          schema:
            type: string
      responses:
        200:
         description: Author successfully attached to the book

  /authors:
    get:
      summary: Get all authors
      description: Get a list of all authors.
      operationId: getAuthors
      parameters:
        - in: query
          name: authorName
          description: Filter authors by name
          required: false
          schema:
            type: string
      responses:
        200:
          description: The list of filtered authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
    put:
      summary: Create or update authors
      operationId: crupdateAuthors
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Author'
      responses:
        200:
          description: The list of created or updated authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
    delete:
      summary: Delete authors
      operationId: deleteAuthors
      responses:
        200:
          description: Authors successfully deleted
  /books/authors:
    put:
      summary: Attach authors to books
      description: Attach many authors to many books by id.
      operationId: attachAuthorsToBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/UpdateBookAuthor"
      responses:
        200:
          description: Authors successfully attached to the books

components:
  schemas:
    Book:
      type: object
      properties:
        id:
          type: string
        bookName:
          type: string
        author:
          $ref: '#/components/schemas/Author'
        pageNumbers:
          type: integer
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate:
          type: string
          format: date

    crupdateBooks:
      type: object
      
      allOf:
          - $ref: '#/components/schemas/Book'
          - type: object
          - required:
            - id
            - bookName
            - pageNumbers
            - topic
            - releaseDate
    UpdateBookAuthor:
      type: object
      properties:
        bookId:
          type: string
          description: The ID of the book to update/attach an author
        authorId:
           type: string
           description: The ID of the author to attach to the book

    Author:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        sex:
          type: string
          enum:
            - M
            - F